

What is Kubernetes? 
======================
Kubernetes is a container management technology developed in Google lab to manage containerized applications in different kind of environments such as physical, virtual, and cloud infrastructure.

Kubernetes comes with a capability of automating deployment, scaling of application, and operations of application containers across clusters. It is capable of creating container centric infrastructure.


Features of Kubernetes
======================
Continues development, integration and deployment
Containerized infrastructure
Application-centric management
Auto-scalable infrastructure
Environment consistency across development testing and production
Loosely coupled infrastructure, where each component can act as a separate unit
Higher density of resource utilization
Predictable infrastructure which is going to be created

It can run application on clusters of physical and virtual machine infrastructure. 
It also has the capability to run applications on cloud. 
It helps in moving from host-centric infrastructure to container-centric infrastructure.


Kubernetes - Cluster Architecture
==================================
Kubernetes follows client-server architecture. Wherein, we have master installed on one machine
and the node on separate Linux machines.


Kubernetes - Master Machine Components
=======================================
  etcd
  ====
It stores the configuration information which can be used by each of the nodes in the cluster. It is a high availability key value store that can be distributed among multiple nodes. It is accessible only by Kubernetes API server as it may have some sensitive information. It is a distributed key value Store which is accessible to all.

API Server
===========
Kubernetes is an API server which provides all the operation on cluster using the API. API server implements an interface, which means different tools and libraries can readily communicate with it. Kubeconfig is a package along with the server side tools that can be used for communication. It exposes Kubernetes API.

Controller Manager
==================
This component is responsible for most of the collectors that regulates the state of cluster and performs a task. In general, it can be considered as a daemon which runs in nonterminating loop and is responsible for collecting and sending information to API server. It works toward getting the shared state of cluster and then make changes to bring the current status of the server to the desired state. The key controllers are replication controller, endpoint controller, namespace controller, and service account controller. The controller manager runs different kind of controllers to handle nodes, endpoints, etc.

Scheduler
===========
This is one of the key components of Kubernetes master. It is a service in master responsible for distributing the workload. It is responsible for tracking utilization of working load on cluster nodes and then placing the workload on which resources are available and accept the workload. In other words, this is the mechanism responsible for allocating pods to available nodes. The scheduler is responsible for workload utilization and allocating pod to new node.



Kubernetes - Node Components
============================
Docker
=======
The first requirement of each node is Docker which helps in running the encapsulated application containers in a relatively isolated but lightweight operating environment.

Kubelet Service
================
This is a small service in each node responsible for relaying information to and from control plane service. It interacts with etcd store to read configuration details and wright values. This communicates with the master component to receive commands and work. The kubelet process then assumes responsibility for maintaining the state of work and the node server. It manages network rules, port forwarding, etc.

Kubernetes Proxy Service
========================
This is a proxy service which runs on each node and helps in making services available to the external host. It helps in forwarding the request to correct containers and is capable of performing primitive load balancing. It makes sure that the networking environment is predictable and accessible and at the same time it is isolated as well. It manages pods on node, volumes, secrets, creating new containersâ€™ health checkup, etc.


Kubernetes Objects
==================
Containers,Pods,ReplicaSets,Services,Secrets,ConfigMaps,Deployments,DaemonSets

=>Pods manage containers
=>ReplicaSets manage pods
=>Services expose pod processes to outside world
=>ConfigMaps and Secrets help you configure Pods
=>Labels are the plumbing taht ties everything togethers
=>Deployment manage the change from one set of replicasets.pods to another(e.g for a software release)


 =>represented as JSON or YAML files
 =>You create these and then push them to the K8s API with Kubectl
   (or receive them as output from kubectlafter it hits the K8s API fro you)


kubectl controls the Kubernetes cluster manager.

 Find more information at: https://kubernetes.io/docs/reference/kubectl/overview/

Basic Commands (Beginner):
  create         Create a resource from a file or from stdin.
  expose         Take a replication controller, service, deployment or pod and expose it as a new
Kubernetes Service
  run            Run a particular image on the cluster
  set            Set specific features on objects

Basic Commands (Intermediate):
  explain        Documentation of resources
  get            Display one or many resources
  edit           Edit a resource on the server
  delete         Delete resources by filenames, stdin, resources and names, or by resources and
label selector

Deploy Commands:
  rollout        Manage the rollout of a resource
  scale          Set a new size for a Deployment, ReplicaSet or Replication Controller
  autoscale      Auto-scale a Deployment, ReplicaSet, or ReplicationController

Cluster Management Commands:
  certificate    Modify certificate resources.
  cluster-info   Display cluster info
  top            Display Resource (CPU/Memory/Storage) usage.
  cordon         Mark node as unschedulable
  uncordon       Mark node as schedulable
  drain          Drain node in preparation for maintenance
  taint          Update the taints on one or more nodes

Troubleshooting and Debugging Commands:
  describe       Show details of a specific resource or group of resources
  logs           Print the logs for a container in a pod
  attach         Attach to a running container
  exec           Execute a command in a container
  port-forward   Forward one or more local ports to a pod
  proxy          Run a proxy to the Kubernetes API server
  cp             Copy files and directories to and from containers.
  auth           Inspect authorization

Advanced Commands:
  diff           Diff live version against would-be applied version
  apply          Apply a configuration to a resource by filename or stdin
  patch          Update field(s) of a resource using strategic merge patch
  replace        Replace a resource by filename or stdin
  wait           Experimental: Wait for a specific condition on one or many resources.
  convert        Convert config files between different API versions
  kustomize      Build a kustomization target from a directory or a remote url.

Settings Commands:
  label          Update the labels on a resource
  annotate       Update the annotations on a resource
  completion     Output shell completion code for the specified shell (bash or zsh)

Other Commands:
  api-resources  Print the supported API resources on the server
  api-versions   Print the supported API versions on the server, in the form of "group/version"
  config         Modify kubeconfig files
  plugin         Provides utilities for interacting with plugins.
  version        Print the client and server version information

Usage:
  kubectl [flags] [options]

Use "kubectl <command> --help" for more information about a given command.
Use "kubectl options" for a list of global command-line options (applies to all commands).


======================================
Day3

Reference Links
===============
https://kubernetes.io/docs/reference/kubectl/docker-cli-to-kubectl/
https://kubernetes.io/docs/reference/generated/kubectl/kubectl-commands#run

Start a single instance of nginx    
            =>kubectl run nginx --image=nginx


Start a single instance of hazelcast and let the container expose port 5701 .
            
            kubectl run hazelcast --image=hazelcast --port=5701


Start a single instance of hazelcast and set environment variables "DNS_DOMAIN=cluster" and "POD_NAMESPACE=default" in the container.
          
           kubectl run hazelcast --image=hazelcast --env="DNS_DOMAIN=cluster" --env="POD_NAMESPACE=default"
           
Start a single instance of hazelcast and set labels "app=hazelcast" and "env=prod" in the container.

          kubectl run hazelcast --image=hazelcast --labels="app=hazelcast,env=prod"
          

Start a replicated instance of nginx.

         kubectl run nginx --image=nginx --replicas=5
         
Dry run. Print the corresponding API objects without creating them.

         kubectl run nginx --image=nginx --dry-run         
         

Start a single instance of nginx, but overload the spec of the deployment with a partial set of values parsed from JSON.

       kubectl run nginx --image=nginx --overrides='{ "apiVersion": "v1", "spec": { ... } }'


=================

Creating Objects
================
Kubernetes manifests can be defined in YAML or JSON. The file extension .yaml, .yml, and .json can be used.

kubectl apply -f ./my-manifest.yaml            # create resource(s)
kubectl apply -f ./my1.yaml -f ./my2.yaml      # create from multiple files
kubectl apply -f ./dir                         # create resource(s) in all manifest files in dir
kubectl apply -f https://git.io/vPieo          # create resource(s) from url
kubectl create deployment nginx --image=nginx  # start a single instance of nginx
kubectl explain pods,svc                       # get the documentation for pod and svc manifests



Viewing, Finding Resources
==========================
# Get commands with basic output
kubectl get services                          # List all services in the namespace
kubectl get pods --all-namespaces             # List all pods in all namespaces
kubectl get pods -o wide                      # List all pods in the current namespace, with more details
kubectl get deployment my-dep                 # List a particular deployment
kubectl get pods                              # List all pods in the namespace
kubectl get pod my-pod -o yaml                # Get a pod's YAML
kubectl get pod my-pod -o yaml --export       # Get a pod's YAML without cluster specific information

# Describe commands with verbose output
kubectl describe nodes my-node
kubectl describe pods my-pod

# List Services Sorted by Name
kubectl get services --sort-by=.metadata.name

# List pods Sorted by Restart Count
kubectl get pods --sort-by='.status.containerStatuses[0].restartCount'

# List PersistentVolumes sorted by capacity
kubectl get pv --sort-by=.spec.capacity.storage

# Get the version label of all pods with label app=cassandra
kubectl get pods --selector=app=cassandra -o \
  jsonpath='{.items[*].metadata.labels.version}'

# Get all worker nodes (use a selector to exclude results that have a label
# named 'node-role.kubernetes.io/master')
kubectl get node --selector='!node-role.kubernetes.io/master'

# Get all running pods in the namespace
kubectl get pods --field-selector=status.phase=Running

# Get ExternalIPs of all nodes
kubectl get nodes -o jsonpath='{.items[*].status.addresses[?(@.type=="ExternalIP")].address}'

# List Names of Pods that belong to Particular RC
# "jq" command useful for transformations that are too complex for jsonpath, it can be found at https://stedolan.github.io/jq/
sel=${$(kubectl get rc my-rc --output=json | jq -j '.spec.selector | to_entries | .[] | "\(.key)=\(.value),"')%?}
echo $(kubectl get pods --selector=$sel --output=jsonpath={.items..metadata.name})

# Show labels for all pods (or any other Kubernetes object that supports labelling)
kubectl get pods --show-labels

# Check which nodes are ready
JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}' \
 && kubectl get nodes -o jsonpath="$JSONPATH" | grep "Ready=True"

# List all Secrets currently in use by a pod
kubectl get pods -o json | jq '.items[].spec.containers[].env[]?.valueFrom.secretKeyRef.name' | grep -v null | sort | uniq

# List Events sorted by timestamp
kubectl get events --sort-by=.metadata.creationTimestamp

# Compares the current state of the cluster against the state that the cluster would be in if the manifest was applied.
kubectl diff -f ./my-manifest.yaml



day4
=====

kubectl run pradeep-nginx --image=nginx --port=80 --replicas=3

kubectl expose deployment pradeep-nginx --type=NodePort --name=pradeep-np-nginx-service

kubectl expose deployment pradeep-nginx --type=LoadBalancer --name=pradeep-lb-nginx-service






Proxy    : It is a server which hides the identity of client
=====    

Benefits
             1.Anonymity
             2.Caching
             3.Blocking Unwanted Site 
             4.GeoFencing
    
    
     Client 1   -----------
                           
     Client 2   -----------                 Proxy Server  ---------------        Server          
   
     Client 3  ------------
     
   
Reverse Proxy    : It is a server which hides the identity of Server
=============
   Benefits
            Load balancing
            Caching
            Isolating the internal traffic
            Logging
            
                                                                           -------- Server1


         Client  (80)--------------------    Reverse Proxy    ---------------- -------- Server2

 
                                                                           -------- Server3
                                                                           


Pod Yaml file Example
=====================
apiVersion: v1
kind: Pod
metadata:
  name: myapp-pod
  labels:    
    app: myapp
    type: front-end
spec:
  containers:
  - name: nginx-container
    image: nginx


Pod-definition.yaml
===================
apiVersion: v1
kind: Pod
metadata:
  name: myapp-pod
  labels:
    app: myapp
    type: front-end
spec:
 containers:
    name: nginx-container
    image: nginx


kubectl apply -f ./pod-definition.yaml


service-definition.yaml
========================
apiVersion: v1
kind: Service
metadata:
  name: myapp-service
spec:
  type: NodePort
  ports:
    - targetPort: 80
      port: 80
      nodePort: 2222
  selector:
    app: myapp
    type: front-end


kubectl create -f ./service-definition.yaml


day5
====
Ingress 7 is Layer 7 Load balancer in Kubernetes cluster that can be configured by
using native kubernetes primitives just as other kubernetes objects

Even Ingress shoud be exposed to make it accessible outside cluster 

1.Ingress Service (Node Port)
2.Ingress Service (Load Balancer)

 Deploy  (Reverse proxy/Load Balancing Solution  Nginx ,HA Proxy or trafik)
       The solution you deploye is called as Ingress Controller
 
 Configure (defining services,routes etc)
       The set of rules you define are called as Ingress resources
       Ingress resources can be created using definition files similar to (pods,services and deployments)
       

A Kubernetes cluster doesnot come with Ingress controller default.
  You must deploy this one
  GCP HTTP(s) ,Load Balancer (GCE)
  NgiNX
  Ingress Controller have additional intelligence built in to them
  1.monitor K8s cluster for new definitions and Ingress resources
  2.configure nginx server accordingly
  
  Nginx controller has been deployed as another deployment.
  
    
    Install Kubernetes Ingress Controller
    Kubernetes Ingress is an additional Kubernetes Resources which can be installed by:


   kubectl apply -f  https://raw.githubusercontent.com/kubernetes/ingress-nginx/nginx-0.24.1/deploy/mandatory.yaml
   kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/nginx-0.24.1/deploy/provider/cloud-generic.yaml
  
  
  Using the following command youâ€™ll see the k8s resources which get installed in the namespace ingress-nginx:

  kubectl get svc,pod --namespace=ingress-nginx


Reference url :  https://codeburst.io/kubernetes-ingress-simply-visually-explained-d9cad44e4419





  
  
  
  
  
  
  
       
       
       
       
       
       
       
       
       
       
 
 














  
